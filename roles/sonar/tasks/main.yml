---

## Installing sonarqube.

- name: Download Sonar.
  get_url:
    url: "{{ sonar_download_url }}"
    dest: "{{ workspace }}/{{ sonar_version_directory }}.zip"

- name: Unzip Sonar.
  unarchive:
    src: "{{ workspace }}/{{ sonar_version_directory }}.zip"
    dest: /usr/local/
    copy: no
    
- name: Move Sonar into place.
  shell: >
    mv /usr/local/{{ sonar_version_directory }} /usr/local/sonar
  ignore_errors: True
  
- name: Ensure Sonar is running.
  shell: sh /usr/local/sonar/bin/linux-x86-64/sonar.sh start
  ignore_errors: True
  
- name: Make sure Sonar is responding on the configured port.
  wait_for: port=9000 delay=3 timeout=300
    
- name: Stoping Sonar.
  service: name=sonar state=stopped enabled=yes
  register: stop_failed
  ignore_errors: True
  
- name: Stoping Sonar - retry
  shell: sh /usr/local/sonar/bin/linux-x86-64/sonar.sh stop
  when: stop_failed|failed
  ignore_errors: True
  
- name: Create a database for Sonar.
  mysql_db:
    name: "{{ sonar_mysql_database }}"
    state: present

- name: Create a sonar user.
  mysql_user:
    name: "{{ sonar_mysql_username }}"
    host: "{{ item }}"
    priv: "{{ sonar_mysql_database }}.*:ALL"
    password: "{{ sonar_mysql_password }}"
  with_items: "{{ sonar_mysql_allowed_hosts }}"
  
- name: Configure SonarQube JDBC settings for MySQL.
  lineinfile:
    dest: /usr/local/sonar/conf/sonar.properties
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  #notify: restart sonar
  with_items:
    - regexp: "^sonar.jdbc.username"
      line: "#sonar.jdbc.username={{ sonar_mysql_username }}"
    - regexp: "^sonar.jdbc.username"
      line: "sonar.jdbc.username={{ sonar_mysql_username }}"
    - regexp: "^sonar.jdbc.password"
      line: "sonar.jdbc.password={{ sonar_mysql_password }}"
    - regexp: "^sonar.jdbc.url"
      line: "sonar.jdbc.url=jdbc:mysql://{{ sonar_mysql_host }}:{{ sonar_mysql_port }}/{{ sonar_mysql_database }}?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
  
- name: Add sonar symlinks for service management.
  file:
    src: /usr/local/sonar/bin/linux-x86-64/sonar.sh
    dest: "{{ item }}"
    state: link
  with_items:
    - /usr/bin/sonar
    - /etc/init.d/sonar

- name: Ensure Sonar is running with console.
  shell: sh /usr/local/sonar/bin/linux-x86-64/sonar.sh console > /dev/null 2>&1 & 
  register: console_failed
  ignore_errors: True
  
- name: Ensure Sonar is running - retry.
  service: name=sonar state=started enabled=yes
  register: start_failed
  when: console_failed|failed
  ignore_errors: True
  
- name: Ensure Sonar is running - retry.
  shell: sh /usr/local/sonar/bin/linux-x86-64/sonar.sh start 
  when: start_failed|failed
  ignore_errors: True

- name: Make sure Sonar is responding on the configured port.
  wait_for: port=9000 delay=3 timeout=60
  ignore_errors: True
